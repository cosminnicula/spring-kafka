/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.intermediatebox.avro.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sample map */
@org.apache.avro.specific.AvroGenerated
public class Avro07 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2715688721673021845L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Avro07\",\"namespace\":\"dev.intermediatebox.avro.data\",\"doc\":\"Sample map\",\"fields\":[{\"name\":\"bestHeroVotes\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"mandatory map\"},{\"name\":\"lotteryNumbers\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"int\"},\"avro.java.string\":\"String\"},\"doc\":\"map of (array of int)\"},{\"name\":\"favouriteFoods\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"optional map\",\"default\":null},{\"name\":\"favouritePets\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"map with default value\",\"default\":{\"dog lovers\":\"a cute little dog\",\"cat fans\":\"white persian cat\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Avro07> ENCODER =
      new BinaryMessageEncoder<Avro07>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Avro07> DECODER =
      new BinaryMessageDecoder<Avro07>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Avro07> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Avro07> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Avro07> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Avro07>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Avro07 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Avro07 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Avro07 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Avro07 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** mandatory map */
  private java.util.Map<java.lang.String,java.lang.String> bestHeroVotes;
  /** map of (array of int) */
  private java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> lotteryNumbers;
  /** optional map */
  private java.util.Map<java.lang.String,java.lang.String> favouriteFoods;
  /** map with default value */
  private java.util.Map<java.lang.String,java.lang.String> favouritePets;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Avro07() {}

  /**
   * All-args constructor.
   * @param bestHeroVotes mandatory map
   * @param lotteryNumbers map of (array of int)
   * @param favouriteFoods optional map
   * @param favouritePets map with default value
   */
  public Avro07(java.util.Map<java.lang.String,java.lang.String> bestHeroVotes, java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> lotteryNumbers, java.util.Map<java.lang.String,java.lang.String> favouriteFoods, java.util.Map<java.lang.String,java.lang.String> favouritePets) {
    this.bestHeroVotes = bestHeroVotes;
    this.lotteryNumbers = lotteryNumbers;
    this.favouriteFoods = favouriteFoods;
    this.favouritePets = favouritePets;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bestHeroVotes;
    case 1: return lotteryNumbers;
    case 2: return favouriteFoods;
    case 3: return favouritePets;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bestHeroVotes = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: lotteryNumbers = (java.util.Map<java.lang.String,java.util.List<java.lang.Integer>>)value$; break;
    case 2: favouriteFoods = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 3: favouritePets = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bestHeroVotes' field.
   * @return mandatory map
   */
  public java.util.Map<java.lang.String,java.lang.String> getBestHeroVotes() {
    return bestHeroVotes;
  }


  /**
   * Sets the value of the 'bestHeroVotes' field.
   * mandatory map
   * @param value the value to set.
   */
  public void setBestHeroVotes(java.util.Map<java.lang.String,java.lang.String> value) {
    this.bestHeroVotes = value;
  }

  /**
   * Gets the value of the 'lotteryNumbers' field.
   * @return map of (array of int)
   */
  public java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> getLotteryNumbers() {
    return lotteryNumbers;
  }


  /**
   * Sets the value of the 'lotteryNumbers' field.
   * map of (array of int)
   * @param value the value to set.
   */
  public void setLotteryNumbers(java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> value) {
    this.lotteryNumbers = value;
  }

  /**
   * Gets the value of the 'favouriteFoods' field.
   * @return optional map
   */
  public java.util.Map<java.lang.String,java.lang.String> getFavouriteFoods() {
    return favouriteFoods;
  }


  /**
   * Sets the value of the 'favouriteFoods' field.
   * optional map
   * @param value the value to set.
   */
  public void setFavouriteFoods(java.util.Map<java.lang.String,java.lang.String> value) {
    this.favouriteFoods = value;
  }

  /**
   * Gets the value of the 'favouritePets' field.
   * @return map with default value
   */
  public java.util.Map<java.lang.String,java.lang.String> getFavouritePets() {
    return favouritePets;
  }


  /**
   * Sets the value of the 'favouritePets' field.
   * map with default value
   * @param value the value to set.
   */
  public void setFavouritePets(java.util.Map<java.lang.String,java.lang.String> value) {
    this.favouritePets = value;
  }

  /**
   * Creates a new Avro07 RecordBuilder.
   * @return A new Avro07 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro07.Builder newBuilder() {
    return new dev.intermediatebox.avro.data.Avro07.Builder();
  }

  /**
   * Creates a new Avro07 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Avro07 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro07.Builder newBuilder(dev.intermediatebox.avro.data.Avro07.Builder other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro07.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro07.Builder(other);
    }
  }

  /**
   * Creates a new Avro07 RecordBuilder by copying an existing Avro07 instance.
   * @param other The existing instance to copy.
   * @return A new Avro07 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro07.Builder newBuilder(dev.intermediatebox.avro.data.Avro07 other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro07.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro07.Builder(other);
    }
  }

  /**
   * RecordBuilder for Avro07 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Avro07>
    implements org.apache.avro.data.RecordBuilder<Avro07> {

    /** mandatory map */
    private java.util.Map<java.lang.String,java.lang.String> bestHeroVotes;
    /** map of (array of int) */
    private java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> lotteryNumbers;
    /** optional map */
    private java.util.Map<java.lang.String,java.lang.String> favouriteFoods;
    /** map with default value */
    private java.util.Map<java.lang.String,java.lang.String> favouritePets;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro07.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bestHeroVotes)) {
        this.bestHeroVotes = data().deepCopy(fields()[0].schema(), other.bestHeroVotes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lotteryNumbers)) {
        this.lotteryNumbers = data().deepCopy(fields()[1].schema(), other.lotteryNumbers);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.favouriteFoods)) {
        this.favouriteFoods = data().deepCopy(fields()[2].schema(), other.favouriteFoods);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.favouritePets)) {
        this.favouritePets = data().deepCopy(fields()[3].schema(), other.favouritePets);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Avro07 instance
     * @param other The existing instance to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro07 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.bestHeroVotes)) {
        this.bestHeroVotes = data().deepCopy(fields()[0].schema(), other.bestHeroVotes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lotteryNumbers)) {
        this.lotteryNumbers = data().deepCopy(fields()[1].schema(), other.lotteryNumbers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.favouriteFoods)) {
        this.favouriteFoods = data().deepCopy(fields()[2].schema(), other.favouriteFoods);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favouritePets)) {
        this.favouritePets = data().deepCopy(fields()[3].schema(), other.favouritePets);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'bestHeroVotes' field.
      * mandatory map
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getBestHeroVotes() {
      return bestHeroVotes;
    }


    /**
      * Sets the value of the 'bestHeroVotes' field.
      * mandatory map
      * @param value The value of 'bestHeroVotes'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder setBestHeroVotes(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.bestHeroVotes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bestHeroVotes' field has been set.
      * mandatory map
      * @return True if the 'bestHeroVotes' field has been set, false otherwise.
      */
    public boolean hasBestHeroVotes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bestHeroVotes' field.
      * mandatory map
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder clearBestHeroVotes() {
      bestHeroVotes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lotteryNumbers' field.
      * map of (array of int)
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> getLotteryNumbers() {
      return lotteryNumbers;
    }


    /**
      * Sets the value of the 'lotteryNumbers' field.
      * map of (array of int)
      * @param value The value of 'lotteryNumbers'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder setLotteryNumbers(java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> value) {
      validate(fields()[1], value);
      this.lotteryNumbers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lotteryNumbers' field has been set.
      * map of (array of int)
      * @return True if the 'lotteryNumbers' field has been set, false otherwise.
      */
    public boolean hasLotteryNumbers() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lotteryNumbers' field.
      * map of (array of int)
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder clearLotteryNumbers() {
      lotteryNumbers = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'favouriteFoods' field.
      * optional map
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getFavouriteFoods() {
      return favouriteFoods;
    }


    /**
      * Sets the value of the 'favouriteFoods' field.
      * optional map
      * @param value The value of 'favouriteFoods'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder setFavouriteFoods(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[2], value);
      this.favouriteFoods = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'favouriteFoods' field has been set.
      * optional map
      * @return True if the 'favouriteFoods' field has been set, false otherwise.
      */
    public boolean hasFavouriteFoods() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'favouriteFoods' field.
      * optional map
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder clearFavouriteFoods() {
      favouriteFoods = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'favouritePets' field.
      * map with default value
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getFavouritePets() {
      return favouritePets;
    }


    /**
      * Sets the value of the 'favouritePets' field.
      * map with default value
      * @param value The value of 'favouritePets'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder setFavouritePets(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.favouritePets = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'favouritePets' field has been set.
      * map with default value
      * @return True if the 'favouritePets' field has been set, false otherwise.
      */
    public boolean hasFavouritePets() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'favouritePets' field.
      * map with default value
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro07.Builder clearFavouritePets() {
      favouritePets = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Avro07 build() {
      try {
        Avro07 record = new Avro07();
        record.bestHeroVotes = fieldSetFlags()[0] ? this.bestHeroVotes : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.lotteryNumbers = fieldSetFlags()[1] ? this.lotteryNumbers : (java.util.Map<java.lang.String,java.util.List<java.lang.Integer>>) defaultValue(fields()[1]);
        record.favouriteFoods = fieldSetFlags()[2] ? this.favouriteFoods : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[2]);
        record.favouritePets = fieldSetFlags()[3] ? this.favouritePets : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Avro07>
    WRITER$ = (org.apache.avro.io.DatumWriter<Avro07>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Avro07>
    READER$ = (org.apache.avro.io.DatumReader<Avro07>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.bestHeroVotes.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.bestHeroVotes.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.lotteryNumbers.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Integer>> e1: this.lotteryNumbers.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.util.List<java.lang.Integer> v1 = e1.getValue();
      long size2 = v1.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Integer e2: v1) {
        actualSize2++;
        out.startItem();
        out.writeInt(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    if (this.favouriteFoods == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.favouriteFoods.size();
      out.writeMapStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e3: this.favouriteFoods.entrySet()) {
        actualSize3++;
        out.startItem();
        out.writeString(e3.getKey());
        java.lang.String v3 = e3.getValue();
        out.writeString(v3);
      }
      out.writeMapEnd();
      if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    long size4 = this.favouritePets.size();
    out.writeMapStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e4: this.favouritePets.entrySet()) {
      actualSize4++;
      out.startItem();
      out.writeString(e4.getKey());
      java.lang.String v4 = e4.getValue();
      out.writeString(v4);
    }
    out.writeMapEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size4 + ", but element count was " + actualSize4 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.bestHeroVotes; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
        this.bestHeroVotes = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> m1 = this.lotteryNumbers; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Integer>>((int)size1);
        this.lotteryNumbers = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String k1 = null;
          k1 = in.readString();
          java.util.List<java.lang.Integer> v1 = null;
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Integer> a2 = v1;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("lotteryNumbers").schema().getValueType());
            v1 = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readInt();
              a2.add(e2);
            }
          }
          m1.put(k1, v1);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.favouriteFoods = null;
      } else {
        long size3 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m3 = this.favouriteFoods; // Need fresh name due to limitation of macro system
        if (m3 == null) {
          m3 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size3);
          this.favouriteFoods = m3;
        } else m3.clear();
        for ( ; 0 < size3; size3 = in.mapNext()) {
          for ( ; size3 != 0; size3--) {
            java.lang.String k3 = null;
            k3 = in.readString();
            java.lang.String v3 = null;
            v3 = in.readString();
            m3.put(k3, v3);
          }
        }
      }

      long size4 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m4 = this.favouritePets; // Need fresh name due to limitation of macro system
      if (m4 == null) {
        m4 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size4);
        this.favouritePets = m4;
      } else m4.clear();
      for ( ; 0 < size4; size4 = in.mapNext()) {
        for ( ; size4 != 0; size4--) {
          java.lang.String k4 = null;
          k4 = in.readString();
          java.lang.String v4 = null;
          v4 = in.readString();
          m4.put(k4, v4);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.bestHeroVotes; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
            this.bestHeroVotes = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        case 1:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.String,java.util.List<java.lang.Integer>> m1 = this.lotteryNumbers; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Integer>>((int)size1);
            this.lotteryNumbers = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String k1 = null;
              k1 = in.readString();
              java.util.List<java.lang.Integer> v1 = null;
              long size2 = in.readArrayStart();
              java.util.List<java.lang.Integer> a2 = v1;
              if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("lotteryNumbers").schema().getValueType());
                v1 = a2;
              } else a2.clear();
              SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
              for ( ; 0 < size2; size2 = in.arrayNext()) {
                for ( ; size2 != 0; size2--) {
                  java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
                  e2 = in.readInt();
                  a2.add(e2);
                }
              }
              m1.put(k1, v1);
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.favouriteFoods = null;
          } else {
            long size3 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m3 = this.favouriteFoods; // Need fresh name due to limitation of macro system
            if (m3 == null) {
              m3 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size3);
              this.favouriteFoods = m3;
            } else m3.clear();
            for ( ; 0 < size3; size3 = in.mapNext()) {
              for ( ; size3 != 0; size3--) {
                java.lang.String k3 = null;
                k3 = in.readString();
                java.lang.String v3 = null;
                v3 = in.readString();
                m3.put(k3, v3);
              }
            }
          }
          break;

        case 3:
          long size4 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m4 = this.favouritePets; // Need fresh name due to limitation of macro system
          if (m4 == null) {
            m4 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size4);
            this.favouritePets = m4;
          } else m4.clear();
          for ( ; 0 < size4; size4 = in.mapNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.String k4 = null;
              k4 = in.readString();
              java.lang.String v4 = null;
              v4 = in.readString();
              m4.put(k4, v4);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










