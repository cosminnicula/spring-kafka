/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.intermediatebox.avro.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sample enum */
@org.apache.avro.specific.AvroGenerated
public class Avro04 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4212745634312494790L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Avro04\",\"namespace\":\"dev.intermediatebox.avro.data\",\"doc\":\"Sample enum\",\"fields\":[{\"name\":\"allowedColor\",\"type\":{\"type\":\"enum\",\"name\":\"Avro04Enum\",\"doc\":\"Sample enum\",\"symbols\":[\"BLACK\",\"BLUE\",\"BROWN\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Avro04> ENCODER =
      new BinaryMessageEncoder<Avro04>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Avro04> DECODER =
      new BinaryMessageDecoder<Avro04>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Avro04> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Avro04> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Avro04> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Avro04>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Avro04 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Avro04 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Avro04 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Avro04 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private dev.intermediatebox.avro.data.Avro04Enum allowedColor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Avro04() {}

  /**
   * All-args constructor.
   * @param allowedColor The new value for allowedColor
   */
  public Avro04(dev.intermediatebox.avro.data.Avro04Enum allowedColor) {
    this.allowedColor = allowedColor;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return allowedColor;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: allowedColor = (dev.intermediatebox.avro.data.Avro04Enum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'allowedColor' field.
   * @return The value of the 'allowedColor' field.
   */
  public dev.intermediatebox.avro.data.Avro04Enum getAllowedColor() {
    return allowedColor;
  }


  /**
   * Sets the value of the 'allowedColor' field.
   * @param value the value to set.
   */
  public void setAllowedColor(dev.intermediatebox.avro.data.Avro04Enum value) {
    this.allowedColor = value;
  }

  /**
   * Creates a new Avro04 RecordBuilder.
   * @return A new Avro04 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro04.Builder newBuilder() {
    return new dev.intermediatebox.avro.data.Avro04.Builder();
  }

  /**
   * Creates a new Avro04 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Avro04 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro04.Builder newBuilder(dev.intermediatebox.avro.data.Avro04.Builder other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro04.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro04.Builder(other);
    }
  }

  /**
   * Creates a new Avro04 RecordBuilder by copying an existing Avro04 instance.
   * @param other The existing instance to copy.
   * @return A new Avro04 RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro04.Builder newBuilder(dev.intermediatebox.avro.data.Avro04 other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro04.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro04.Builder(other);
    }
  }

  /**
   * RecordBuilder for Avro04 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Avro04>
    implements org.apache.avro.data.RecordBuilder<Avro04> {

    private dev.intermediatebox.avro.data.Avro04Enum allowedColor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro04.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.allowedColor)) {
        this.allowedColor = data().deepCopy(fields()[0].schema(), other.allowedColor);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Avro04 instance
     * @param other The existing instance to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro04 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.allowedColor)) {
        this.allowedColor = data().deepCopy(fields()[0].schema(), other.allowedColor);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'allowedColor' field.
      * @return The value.
      */
    public dev.intermediatebox.avro.data.Avro04Enum getAllowedColor() {
      return allowedColor;
    }


    /**
      * Sets the value of the 'allowedColor' field.
      * @param value The value of 'allowedColor'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro04.Builder setAllowedColor(dev.intermediatebox.avro.data.Avro04Enum value) {
      validate(fields()[0], value);
      this.allowedColor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'allowedColor' field has been set.
      * @return True if the 'allowedColor' field has been set, false otherwise.
      */
    public boolean hasAllowedColor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'allowedColor' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro04.Builder clearAllowedColor() {
      allowedColor = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Avro04 build() {
      try {
        Avro04 record = new Avro04();
        record.allowedColor = fieldSetFlags()[0] ? this.allowedColor : (dev.intermediatebox.avro.data.Avro04Enum) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Avro04>
    WRITER$ = (org.apache.avro.io.DatumWriter<Avro04>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Avro04>
    READER$ = (org.apache.avro.io.DatumReader<Avro04>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.allowedColor.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.allowedColor = dev.intermediatebox.avro.data.Avro04Enum.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.allowedColor = dev.intermediatebox.avro.data.Avro04Enum.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










