/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.intermediatebox.avro.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Avro11Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4548860900345800576L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Avro11Person\",\"namespace\":\"dev.intermediatebox.avro.data\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Avro11Address\",\"fields\":[{\"name\":\"addressLine1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressLine2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"zipCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"record\",\"name\":\"Avro11Country\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ISO 3166-1 alpha-2 country code\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"country name\"}]}}]},\"namespace\":\"dev.intermediatebox.avro.data\"},{\"name\":\"bankAccounts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Avro11BankAccount\",\"fields\":[{\"name\":\"bankName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountHolderName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankClearingCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currencyCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Avro11Person> ENCODER =
      new BinaryMessageEncoder<Avro11Person>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Avro11Person> DECODER =
      new BinaryMessageDecoder<Avro11Person>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Avro11Person> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Avro11Person> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Avro11Person> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Avro11Person>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Avro11Person to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Avro11Person from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Avro11Person instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Avro11Person fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String firstName;
  private java.lang.String lastName;
  private java.time.LocalDate birthDate;
  private dev.intermediatebox.avro.data.Avro11Address address;
  private java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> bankAccounts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Avro11Person() {}

  /**
   * All-args constructor.
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param birthDate The new value for birthDate
   * @param address The new value for address
   * @param bankAccounts The new value for bankAccounts
   */
  public Avro11Person(java.lang.String firstName, java.lang.String lastName, java.time.LocalDate birthDate, dev.intermediatebox.avro.data.Avro11Address address, java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> bankAccounts) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.birthDate = birthDate;
    this.address = address;
    this.bankAccounts = bankAccounts;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    case 2: return birthDate;
    case 3: return address;
    case 4: return bankAccounts;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = value$ != null ? value$.toString() : null; break;
    case 1: lastName = value$ != null ? value$.toString() : null; break;
    case 2: birthDate = (java.time.LocalDate)value$; break;
    case 3: address = (dev.intermediatebox.avro.data.Avro11Address)value$; break;
    case 4: bankAccounts = (java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'birthDate' field.
   * @return The value of the 'birthDate' field.
   */
  public java.time.LocalDate getBirthDate() {
    return birthDate;
  }


  /**
   * Sets the value of the 'birthDate' field.
   * @param value the value to set.
   */
  public void setBirthDate(java.time.LocalDate value) {
    this.birthDate = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public dev.intermediatebox.avro.data.Avro11Address getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(dev.intermediatebox.avro.data.Avro11Address value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'bankAccounts' field.
   * @return The value of the 'bankAccounts' field.
   */
  public java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> getBankAccounts() {
    return bankAccounts;
  }


  /**
   * Sets the value of the 'bankAccounts' field.
   * @param value the value to set.
   */
  public void setBankAccounts(java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> value) {
    this.bankAccounts = value;
  }

  /**
   * Creates a new Avro11Person RecordBuilder.
   * @return A new Avro11Person RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro11Person.Builder newBuilder() {
    return new dev.intermediatebox.avro.data.Avro11Person.Builder();
  }

  /**
   * Creates a new Avro11Person RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Avro11Person RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro11Person.Builder newBuilder(dev.intermediatebox.avro.data.Avro11Person.Builder other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro11Person.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro11Person.Builder(other);
    }
  }

  /**
   * Creates a new Avro11Person RecordBuilder by copying an existing Avro11Person instance.
   * @param other The existing instance to copy.
   * @return A new Avro11Person RecordBuilder
   */
  public static dev.intermediatebox.avro.data.Avro11Person.Builder newBuilder(dev.intermediatebox.avro.data.Avro11Person other) {
    if (other == null) {
      return new dev.intermediatebox.avro.data.Avro11Person.Builder();
    } else {
      return new dev.intermediatebox.avro.data.Avro11Person.Builder(other);
    }
  }

  /**
   * RecordBuilder for Avro11Person instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Avro11Person>
    implements org.apache.avro.data.RecordBuilder<Avro11Person> {

    private java.lang.String firstName;
    private java.lang.String lastName;
    private java.time.LocalDate birthDate;
    private dev.intermediatebox.avro.data.Avro11Address address;
    private dev.intermediatebox.avro.data.Avro11Address.Builder addressBuilder;
    private java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> bankAccounts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro11Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[2].schema(), other.birthDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasAddressBuilder()) {
        this.addressBuilder = dev.intermediatebox.avro.data.Avro11Address.newBuilder(other.getAddressBuilder());
      }
      if (isValidValue(fields()[4], other.bankAccounts)) {
        this.bankAccounts = data().deepCopy(fields()[4].schema(), other.bankAccounts);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Avro11Person instance
     * @param other The existing instance to copy.
     */
    private Builder(dev.intermediatebox.avro.data.Avro11Person other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[2].schema(), other.birthDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      this.addressBuilder = null;
      if (isValidValue(fields()[4], other.bankAccounts)) {
        this.bankAccounts = data().deepCopy(fields()[4].schema(), other.bankAccounts);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder setLastName(java.lang.String value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthDate' field.
      * @return The value.
      */
    public java.time.LocalDate getBirthDate() {
      return birthDate;
    }


    /**
      * Sets the value of the 'birthDate' field.
      * @param value The value of 'birthDate'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder setBirthDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.birthDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'birthDate' field has been set.
      * @return True if the 'birthDate' field has been set, false otherwise.
      */
    public boolean hasBirthDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'birthDate' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder clearBirthDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public dev.intermediatebox.avro.data.Avro11Address getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder setAddress(dev.intermediatebox.avro.data.Avro11Address value) {
      validate(fields()[3], value);
      this.addressBuilder = null;
      this.address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public dev.intermediatebox.avro.data.Avro11Address.Builder getAddressBuilder() {
      if (addressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(dev.intermediatebox.avro.data.Avro11Address.newBuilder(address));
        } else {
          setAddressBuilder(dev.intermediatebox.avro.data.Avro11Address.newBuilder());
        }
      }
      return addressBuilder;
    }

    /**
     * Sets the Builder instance for the 'address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public dev.intermediatebox.avro.data.Avro11Person.Builder setAddressBuilder(dev.intermediatebox.avro.data.Avro11Address.Builder value) {
      clearAddress();
      addressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'address' field has an active Builder instance
     * @return True if the 'address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return addressBuilder != null;
    }

    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder clearAddress() {
      address = null;
      addressBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bankAccounts' field.
      * @return The value.
      */
    public java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> getBankAccounts() {
      return bankAccounts;
    }


    /**
      * Sets the value of the 'bankAccounts' field.
      * @param value The value of 'bankAccounts'.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder setBankAccounts(java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount> value) {
      validate(fields()[4], value);
      this.bankAccounts = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bankAccounts' field has been set.
      * @return True if the 'bankAccounts' field has been set, false otherwise.
      */
    public boolean hasBankAccounts() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bankAccounts' field.
      * @return This builder.
      */
    public dev.intermediatebox.avro.data.Avro11Person.Builder clearBankAccounts() {
      bankAccounts = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Avro11Person build() {
      try {
        Avro11Person record = new Avro11Person();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.String) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.String) defaultValue(fields()[1]);
        record.birthDate = fieldSetFlags()[2] ? this.birthDate : (java.time.LocalDate) defaultValue(fields()[2]);
        if (addressBuilder != null) {
          try {
            record.address = this.addressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("address"));
            throw e;
          }
        } else {
          record.address = fieldSetFlags()[3] ? this.address : (dev.intermediatebox.avro.data.Avro11Address) defaultValue(fields()[3]);
        }
        record.bankAccounts = fieldSetFlags()[4] ? this.bankAccounts : (java.util.List<dev.intermediatebox.avro.data.Avro11BankAccount>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Avro11Person>
    WRITER$ = (org.apache.avro.io.DatumWriter<Avro11Person>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Avro11Person>
    READER$ = (org.apache.avro.io.DatumReader<Avro11Person>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










